<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo+Github pages部署个人博客网站的感想]]></title>
    <url>%2F2019%2F02%2F10%2Fhexo%2Bgithub%20pages%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%9A%84%E6%84%9F%E6%83%B3%2F</url>
    <content type="text"><![CDATA[题外话：之前我习惯用印象笔记进行知识的剪藏和整理，但是印象笔记本身带给我一种相对封闭的感觉，更像是比较私人的产品；而博客则相反，它更多是面向大众的、开放的，有利于个人经验的输出和知识的共享，所以拥有自己的博客非常有必要。拿博客园和CSDN来说，这两者虽然可以满足写博客的需求，但是自定义程度不够高，缺少一些个性tag。既然如此，为什么我们不自己搭建一个个人博客网站呢？ 用hexo+github pages 搭建个人博客网站是极其方便的，不需要购买域名和服务器，只需要按部就班操作，就可以在短时间内成功拥有自己的一个网站。我自己大概是花了两三个小时搞定，主要是因为对git bash的使用不够熟悉，因此走了一些弯路。实际上动作快的话半个小时就可以搞定。下面是对部署过程的大概介绍，以及必须注意的事项（划重点，也就是所谓的“坑”）。由于本文参考了大量博客，所以在文末我会列出原文链接。 一.Github，Github pages ，Hexo首先介绍一下这三个东西，有大概的了解、知道是什么东西就可以。GitHub是一个面向开源及私有软件项目的托管平台，而GIthub Pages则是github的一项功能，可以放置网页文件到指定文件夹，然后给你一个专属域名用于展示一些项目，现在大多用来开发和制作个人博客网站。它的好处在于域名和服务器都是免费提供的，并且没有网站数量的限制。而Hexo 是一个快速、简洁且高效的博客框架，它使用Markdown解析文章，在几秒内，就可以利用靓丽的主题生成静态网页。（关于Hexo的详细介绍，请看官方文档 https://hexo.io/zh-cn/docs/ ，这里就不展开了）。因此，可以说github和hexo是绝配。接下来，开始我们的工作。 二. 环境和必要准备我个人的环境：win10，64bit必要准备：你需要（1）github账号 ：前往https://github.com/ 官网注册就好（2）git 2.20.1 ： 即最新版本的git，前往https://git-scm.com/ 官网下载并安装。安装完后前往git文件夹下打开git bash，运行以下命令： git config –global user.name “username” git config –global user.email “your mail” 注：将username替换为自己的github账号名，将your mail替换为自己注册github时绑定的邮箱。这一步非常重要，当时部署的时候我因为遗漏了这一步，导致后面报错. （3）node.js ： 前往 https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi 下载并安装。这两个的安装比较简单，一路next就好，不过我推荐还是修改一下路径，尽量放在自己可以找到的位置。（4）hexo ：打开git文件夹下的git bash，运行 以下命令 npm install -g hexo-cli，安装hexo。之后，依次运行以下命令进行hexo的初始化 $ hexo init &lt;folder&gt; $ cd &lt;folder&gt; $ npm install 注：请将上面代码的&lt;folder&gt;替换成你自己想要的文件夹名字，以我为例，我想要在git文件夹下新建一个Myblog文件夹以存放站点文件，那么我这里的代码就应该是 $ hexo init Myblog $ cd Myblog $ npm install 成功之后，我们会在git文件夹下看到新建的Myblog文件夹，里面存放了大量文件。好了，到了这一步，请把git bash关闭，并进入你的站点文件夹里（例如：Myblog文件夹里），右键选择git bash here。如图：这样，我们会在站点目录下重新打开git bash。你可能会疑惑，这和直接去git文件夹下打开git bash有区别吗？有！！区别非常大，在站点目录下打开git bash才可以找到运行命令所需要的环境。所以这里一定要记住，在之后介绍的操作中，凡是需要输入命令的，我们都是像上图这样先打开git bash再输入。 按照上面所说的，我们右键打开git bash，并运行以下代码： 1hexo server 这将在本地打开我们的网站，当提示”xxx is running at xxx“的时候，我们可以通过http://localhost:4000/ 这个网址预览我们的网站，想要切断连接，只需要在命令行窗口按下ctrl+c。至此，hexo博客已经在本地搭建好了。接下来，我们要将hexo和github进行对接。 三. hexo与github 实现对接1.建立仓库 还记得我们之前注册的github账号吗？现在，请进入github网站，并点击头像选择your repository，我们现在需要创建一个仓库（也就是repository）用于存放相关站点文件。按照下图顺序进行设置：其中，Repository name也即是我们的仓库名字，必须是 Github账号名称.github.io的格式。比如你的github名字是ccc，那么仓库名字必须是ccc.github.io 。 2.对接github 在git bash中运行以下命令，安装 hexo-deployer-git 插件。 1npm install hexo-deployer-git --save 运行以下命令，创建SSH key。（注：和上面一样，请将your mail替换成github邮箱地址） $ ssh-keygen -t rsa -C &quot;your mail&quot; 前往 C:\Users\Administrator.ssh\id_rsa.pub （注意，这只是大概位置。不同系统路径可能不同，但是大同小异）打开id_rsa.pub文件（可以用记事本打开，但是推荐用sublime text）。复制文件中的全部内容，前往 https://github.com/settings/keys ，将刚才复制的内容粘贴在New SSH key 的文本框中。 前往站点目录下（例如：git/ Myblog），打开_config.yml 文件，对文件末尾进行如下修改： # Deployment ## Docs: https://hexo.io/docs/deployment.html deploy: type: git repo: git@github.com:username/username.github.io.git branch: master 在这里要注意，1）所有的冒号距离右边的内容之间都有一个空格，如果没有空格，则修改是无效的。2）和前面一样，将usename替换成我们自己的github用户名 。 3）repo后面的地址，在旧版本的hexo中是http地址，但在新版本的hexo用的是ssh地址，我们统一用如上所示的ssh地址。有些博客由于没有进行更新，在说明这个问题的时候依然用的是http地址，造成了一定程度上的误导。 运行以下命令，对接并推送内容到github。 $ hexo g $ hexo d 等待片刻，打开 https://&lt;Github账号名称&gt;.github.io （例如 https://ccc.github.io ) 即可进入你搭建好的个人博客网站了！当然，网站默认用的是landscape主题，比较难看，关于主题的美化和后期一些插件的添加，可以参考文章末尾贴出的链接。 PS： 这里顺便介绍一下常用的 hexo 命令：hexo clean ————————&gt;清除缓存文件和已生成的静态文件hexo g 或者 hexo generate ————————&gt;生成静态文件 hexo d 或者hexo deploy ————————&gt;生成静态文件并部署到仓库 hexo s 或者 hexo server —————————&gt;在本地打开网站 一般来说，在对网站进行修改后，我们可以先用hexo g和hexo s 在本地预览效果，如果效果符合预期的话再用hexo d 推送到 github。当然，可能会遇到本地打开和域名打开的效果不一致，这种情况下通常是因为 1. 没有用hexo clean 清除缓存 2. 没有对浏览器用ctrl+f5 清除缓存 3.忘记用hexo d 将本地文件推送到github 4. 本地和线上的同步本身需要时间，所以上述方法如果无效，可以尝试等几分钟，再打开网站就正常显示了。 参考自：https://www.jianshu.com/p/3a05351a37dchttps://www.simon96.online/2018/10/12/hexo-tutorial/]]></content>
      <categories>
        <category>心得和感想</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站搭建</tag>
        <tag>Github</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery AJAX load()方法中代码执行顺序的问题]]></title>
    <url>%2F2019%2F02%2F10%2FjQuery%20AJAX%20load()%E6%96%B9%E6%B3%95%E4%B8%AD%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题来源于菜鸟教程介绍jq load() 方法时用的一个实例：js：12345678$(&quot;button&quot;).click(function()&#123; $(&quot;#div1&quot;).load(&quot;demo_test.txt&quot;,function(responseTxt,statusTxt,xhr)&#123; if(statusTxt==&quot;success&quot;) alert(&quot;外部内容加载成功!&quot;); if(statusTxt==&quot;error&quot;) alert(&quot;Error: &quot;+xhr.status+&quot;: &quot;+xhr.statusText); &#125;);&#125;); html：12&lt;div id=&quot;div1&quot;&gt;&lt;h2&gt;使用 jQuery AJAX 修改该文本&lt;/h2&gt;&lt;/div&gt;&lt;button&gt;获取外部内容&lt;/button&gt; 这里作为load方法参数的函数是一个回调函数。什么是回调函数呢？我们先来看看回调的英文定义： A callback is a function that is passed as an argument to another function and is executed after its parent function has completed。字面上的理解，回调函数就是一个参数，将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数。这个过程就叫做回调。那么根据这个解释，这段代码应该是先执行load(“demo_test.txt”) 加载外部内容，之后再执行回调函数弹出alert。但是实际运行后发现和预想的不一样：从结果来看，是先弹出alert再改变文本内容。那么，为什么会这样呢？难道上面的说法有误？为了进一步验证，修改代码如下： $(&quot;#div1&quot;).load(&quot;demo_test.txt&quot;,function(responseTxt,statusTxt,xhr){ alert(responseTxt); if(statusTxt==&quot;success&quot;){ 运行：很明显文本内容已经改变，说明前面关于回调函数最后执行的说法是没问题的。接着猜想，之所以先弹出alert再改变文本内容，可能是因为必须等回调函数执行完后才能把文本渲染到浏览器上。为了进一步验证，修改代码如下： 12345$(&quot;#div1&quot;).load(&quot;demo_test.txt&quot;,function(responseTxt,statusTxt,xhr)&#123; if(statusTxt==&quot;success&quot;)&#123; debugger； console.log(&quot;1&quot;); &#125; 运行：控制台中没有打印出1，且程序中断，说明此时回调函数还在执行当中，但是文本内容却已经改变了。这说明上面的猜想错误—–即文本渲染到浏览器上不需要等到回调函数执行结束。但是，那只是一般情况！！问题就在于，alert是可以阻塞浏览器的渲染工作的！ 重新运行最初的代码，可以看到还是先弹出alert，文本没变，但是这时候点开控制台的elements，可以看到图中红框显示这时候文本的内容其实已经改变了。虽然文本内容看上去不变——但是实际情况是文本内容已经改变了，也就是load()方法已经生效了，只是alert阻塞了浏览器将它渲染出来。在这里还要注意，alert可以阻塞浏览器的渲染，而debugger是没办法的。]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>AJAX</tag>
        <tag>浏览器渲染</tag>
      </tags>
  </entry>
</search>
