<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chor</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chorer.github.io/"/>
  <updated>2019-02-15T13:57:56.347Z</updated>
  <id>https://chorer.github.io/</id>
  
  <author>
    <name>Chor</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>$( )[i]返回的不是jq对象</title>
    <link href="https://chorer.github.io/2019/02/15/$(%20)%5Bi%5D%E8%BF%94%E5%9B%9E%E7%9A%84%E4%B8%8D%E6%98%AFjq%E5%AF%B9%E8%B1%A1/"/>
    <id>https://chorer.github.io/2019/02/15/$( )[i]返回的不是jq对象/</id>
    <published>2019-02-15T12:03:55.572Z</published>
    <updated>2019-02-15T13:57:56.347Z</updated>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 22:17:52 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;问题：想要使所有div下的p标签的类名+1.因此采用下列办法：&lt;/p&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;3&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;4&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;4&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;5&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;5&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;https://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; allp=$(&lt;span class=&quot;string&quot;&gt;&quot;div p&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;allp.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        allp[i].attr(&lt;span class=&quot;string&quot;&gt;&quot;class&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;i+2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(allp[i].attr(&lt;span class=&quot;string&quot;&gt;&quot;class&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端" scheme="https://chorer.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://chorer.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="jQuery" scheme="https://chorer.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>编辑工具的选择</title>
    <link href="https://chorer.github.io/2019/02/15/%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7%E7%9A%84%E9%80%89%E6%8B%A9/"/>
    <id>https://chorer.github.io/2019/02/15/编辑工具的选择/</id>
    <published>2019-02-15T08:09:05.306Z</published>
    <updated>2019-02-15T09:15:32.035Z</updated>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 21:40:15 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Hexo是静态博客网站，必须先在本地编辑好md文件再推送到网站上去。md文件也就是所谓的用markdown语法编写内容的文件，因此我们需要一个合适的markdown编辑工具，它必须具备以下特点：&lt;br&gt;1.可导出md文件到本地，并随时进行修改&lt;br&gt;2.可提供分屏预览，支持同步滚动和定位&lt;br&gt;3.启动时响应速度快，编辑时渲染速度快&lt;/p&gt;&lt;p&gt;以下是一些工具在markdown编写方面的优劣比较，可酌情进行选择。&lt;br&gt;（平台：windows）&lt;/p&gt;&lt;h4 id=&quot;印象笔记&quot;&gt;&lt;a href=&quot;#印象笔记&quot; class=&quot;headerlink&quot; title=&quot;印象笔记&quot;&gt;&lt;/a&gt;印象笔记&lt;/h4&gt;&lt;p&gt;印象笔记自带markdown编辑器,如下图：&lt;br&gt;&lt;img src=&quot;https://myblog-1258623898.cos.ap-chengdu.myqcloud.com/myblog/%E5%B7%A5%E5%85%B71.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;优点：提供分屏预览，无需直接编写md代码，只需点击按钮即可，操作方便&lt;br&gt;缺点：无法导出md文件到本地，这是它的致命缺点。&lt;br&gt;
    
    </summary>
    
      <category term="心得和感想" scheme="https://chorer.github.io/categories/%E5%BF%83%E5%BE%97%E5%92%8C%E6%84%9F%E6%83%B3/"/>
    
    
      <category term="编辑工具" scheme="https://chorer.github.io/tags/%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github pages部署个人博客网站的感想</title>
    <link href="https://chorer.github.io/2019/02/15/hexo+github%20pages%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%9A%84%E6%84%9F%E6%83%B3/"/>
    <id>https://chorer.github.io/2019/02/15/hexo+github pages部署个人博客网站的感想/</id>
    <published>2019-02-15T07:35:45.000Z</published>
    <updated>2019-02-15T07:35:54.128Z</updated>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 21:40:15 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;题外话：之前我习惯用印象笔记进行知识的剪藏和整理，但是印象笔记本身带给我一种相对封闭的感觉，更像是比较私人的产品；而博客则相反，它更多是面向大众的、开放的，有利于个人经验的输出和知识的共享，所以拥有自己的博客非常有必要。拿博客园和CSDN来说，这两者虽然可以满足写博客的需求，但是自定义程度不够高，缺少一些个性tag。既然如此，为什么我们不自己搭建一个个人博客网站呢？&lt;/p&gt;&lt;p&gt;用hexo+github pages 搭建个人博客网站是极其方便的，不需要购买域名和服务器，只需要按部就班操作，就可以在短时间内成功拥有自己的一个网站。我自己大概是花了两三个小时搞定，主要是因为对git bash的使用不够熟悉，因此走了一些弯路。实际上动作快的话半个小时就可以搞定。下面是对部署过程的大概介绍，以及&lt;strong&gt;必须注意的事项&lt;/strong&gt;（划重点，也就是所谓的“坑”）。由于本文参考了大量博客，所以在文末我会列出原文链接。&lt;/p&gt;
    
    </summary>
    
      <category term="心得和感想" scheme="https://chorer.github.io/categories/%E5%BF%83%E5%BE%97%E5%92%8C%E6%84%9F%E6%83%B3/"/>
    
    
      <category term="博客" scheme="https://chorer.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="网站搭建" scheme="https://chorer.github.io/tags/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"/>
    
      <category term="Github" scheme="https://chorer.github.io/tags/Github/"/>
    
      <category term="Hexo" scheme="https://chorer.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>DOM Core 与 HTML-DOM</title>
    <link href="https://chorer.github.io/2019/02/14/DOM%20Core%20%E5%92%8CHTML%20DOM/"/>
    <id>https://chorer.github.io/2019/02/14/DOM Core 和HTML DOM/</id>
    <published>2019-02-14T14:29:46.509Z</published>
    <updated>2019-02-14T14:40:58.187Z</updated>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 21:40:15 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;DOM（文档对象模型）是由W3C制定的一套访问和操作XML（eXtensible Markup Language）文档的标准，即API。比如DOM告诉JavaScript引擎如何在浏览器窗口中显示和操作XML创建的标记（Tag）。&lt;/p&gt;&lt;p&gt;DOM与特定的平台、浏览器、语言无关，很多种语言都实现了DOM，比如因为JavaScript和PHP都实现了DOM，所以 JavaScript中有getElementsByTagName()方法，PHP中也有 getElementsByTagName()，getElementsByTagName()方法是DOM规定的访问XML文档的接口。&lt;/p&gt;&lt;p&gt;XML与HTML相似，但两者是有区别。XML和HTML都来自于SGML，它们都含有标记，有着相似的语法，HTML和XML的最大区别在 于：HTML是一个定型的标记语言，用固定的标记来描述和显示数据，比如&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://chorer.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://chorer.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="概念" scheme="https://chorer.github.io/tags/%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>事件相关概念详解</title>
    <link href="https://chorer.github.io/2019/02/13/%E4%BA%8B%E4%BB%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5%E8%AF%A6%E8%A7%A3/"/>
    <id>https://chorer.github.io/2019/02/13/事件相关概念详解/</id>
    <published>2019-02-13T11:35:36.914Z</published>
    <updated>2019-02-14T14:56:39.119Z</updated>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 21:40:15 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;事件&lt;/strong&gt;：事件是用户或浏览器自身执行的某种动作，如click,load和mouseover都是事件的名字。响应某个事件的函数叫做事件处理函数 / 事件处理程序 / 事件句柄。如果想要绑定多个函数，则需要用到事件监听器。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;1-事件绑定的几种方式&quot;&gt;&lt;a href=&quot;#1-事件绑定的几种方式&quot; class=&quot;headerlink&quot; title=&quot;1. 事件绑定的几种方式&quot;&gt;&lt;/a&gt;1. 事件绑定的几种方式&lt;/h2&gt;&lt;p&gt;javascript给DOM绑定事件处理函数总的来说有2种方式：在html文档中绑定、在js代码中绑定。下面的方式1、方式2属于在html中绑定事件，方式3、方式4和方式5属于在js代码中绑定事件，其中，方式4和5属于事件监听，而方式5是最推荐的做法。&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://chorer.github.io/categories/Javascript/"/>
    
    
      <category term="事件" scheme="https://chorer.github.io/tags/%E4%BA%8B%E4%BB%B6/"/>
    
      <category term="dom事件流" scheme="https://chorer.github.io/tags/dom%E4%BA%8B%E4%BB%B6%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>变量的两种命名方式</title>
    <link href="https://chorer.github.io/2019/02/12/%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%91%BD%E5%90%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://chorer.github.io/2019/02/12/变量的两种命名方法/</id>
    <published>2019-02-12T13:56:18.000Z</published>
    <updated>2019-02-12T13:56:45.955Z</updated>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 21:40:15 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;一、驼峰命名法：&quot;&gt;&lt;a href=&quot;#一、驼峰命名法：&quot; class=&quot;headerlink&quot; title=&quot;一、驼峰命名法：&quot;&gt;&lt;/a&gt;一、驼峰命名法：&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;①全部小写&lt;/strong&gt;：变量名中的每一个逻辑断点/每个单词都用下划线隔开。比如：print_employee_paychecks()；&lt;br&gt;&lt;strong&gt;②大小写混合&lt;/strong&gt;：&lt;br&gt;1）&lt;em&gt;小驼峰法&lt;/em&gt;：&lt;br&gt;变量一般用小驼峰法标识。第一个单词以小写字母开始；第二个单词的首字母大写或每一个单词的首字母都采用大写字母，例如：myFirstName、myLastName&lt;br&gt;2）&lt;em&gt;大驼峰法/帕斯卡命名法（Upper Camel Case/pascal）&lt;/em&gt;：&lt;br&gt;常用于类名，函数名，属性，命名空间。相比小驼峰法，大驼峰法把第一个单词的首字母也大写了。例如：DataBaseUser&lt;/p&gt;&lt;h2 id=&quot;二、匈牙利命名法：&quot;&gt;&lt;a href=&quot;#二、匈牙利命名法：&quot; class=&quot;headerlink&quot; title=&quot;二、匈牙利命名法：&quot;&gt;&lt;/a&gt;二、匈牙利命名法：&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="命名" scheme="https://chorer.github.io/tags/%E5%91%BD%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>null和undefined</title>
    <link href="https://chorer.github.io/2019/02/12/null%E5%92%8Cundefined/"/>
    <id>https://chorer.github.io/2019/02/12/null和undefined/</id>
    <published>2019-02-12T12:08:47.000Z</published>
    <updated>2019-02-12T12:08:49.245Z</updated>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 21:40:15 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;一-undefined在变量声明中的体现：&quot;&gt;&lt;a href=&quot;#一-undefined在变量声明中的体现：&quot; class=&quot;headerlink&quot; title=&quot;一. undefined在变量声明中的体现：&quot;&gt;&lt;/a&gt;一. undefined在变量声明中的体现：&lt;/h2&gt;&lt;p&gt;1）声明了、但是没有初始化的变量：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;var aa;
alert(aa);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;浏览器会弹出窗口显示 &lt;code&gt;undefined&lt;/code&gt;。因为对于使用了 &lt;code&gt;var&lt;/code&gt; 声明但没有进行初始化定义的变量, 其值默认为 &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;2） 未声明的变量(1)：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;alert(aa);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;浏览器不会弹出任何东西. 因为 aa 是没有声明的变量。打开 chrome 浏览器的控制台会看到报错如下：&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://chorer.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://chorer.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://chorer.github.io/tags/JavaScript/"/>
    
      <category term="数据类型" scheme="https://chorer.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript原型等概念的理解</title>
    <link href="https://chorer.github.io/2019/02/12/%E3%80%90%E5%8E%9F%E5%9E%8B%E3%80%91JavaScript%E5%8E%9F%E5%9E%8B%E7%AD%89%E6%A6%82%E5%BF%B5%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://chorer.github.io/2019/02/12/【原型】JavaScript原型等概念的理解/</id>
    <published>2019-02-12T12:08:38.000Z</published>
    <updated>2019-02-15T04:57:32.327Z</updated>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 21:40:15 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-创建对象的方法&quot;&gt;&lt;a href=&quot;#1-创建对象的方法&quot; class=&quot;headerlink&quot; title=&quot;1.创建对象的方法&quot;&gt;&lt;/a&gt;1.创建对象的方法&lt;/h2&gt;&lt;p&gt;在了解原型链之前，首先先了解一下创建对象的几种方式，介绍以下三种。&lt;br&gt;&lt;img src=&quot;https://myblog-1258623898.cos.ap-chengdu.myqcloud.com/myblog/%E5%8E%9F%E5%9E%8B1.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;br&gt;代码：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第一种方式：字面量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o1 = &amp;#123;&lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;o1&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;(&amp;#123;&lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;o2&#39;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第二种方式：构造函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; M = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o3 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; M(&lt;span class=&quot;string&quot;&gt;&#39;o3&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第三种方式：Object.create&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p = &amp;#123;&lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;p&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o4 = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(p)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(o1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(o2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(o3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(o4)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;打印结果：&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://chorer.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://chorer.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="继承" scheme="https://chorer.github.io/tags/%E7%BB%A7%E6%89%BF/"/>
    
      <category term="原型" scheme="https://chorer.github.io/tags/%E5%8E%9F%E5%9E%8B/"/>
    
      <category term="对象" scheme="https://chorer.github.io/tags/%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>英伦摇滚入门：20支英国摇滚乐队</title>
    <link href="https://chorer.github.io/2019/02/11/%E8%8B%B1%E4%BC%A6%E6%91%87%E6%BB%9A%E5%85%A5%E9%97%A8%EF%BC%9A20%E6%94%AF%E8%8B%B1%E5%9B%BD%E6%91%87%E6%BB%9A%E4%B9%90%E9%98%9F/"/>
    <id>https://chorer.github.io/2019/02/11/英伦摇滚入门：20支英国摇滚乐队/</id>
    <published>2019-02-11T12:55:00.000Z</published>
    <updated>2019-02-12T06:19:47.326Z</updated>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Feb 15 2019 21:40:15 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;之前看到的一篇关于英国摇滚乐队的总结。还挺好的，不全是英伦摇滚。排名不分先后，当然，我还是偏爱Oasis。&lt;/p&gt;&lt;h4 id=&quot;1-The-Beatles（披头士乐队-甲壳虫乐队）&quot;&gt;&lt;a href=&quot;#1-The-Beatles（披头士乐队-甲壳虫乐队）&quot; class=&quot;headerlink&quot; title=&quot;1. The Beatles（披头士乐队/甲壳虫乐队）&quot;&gt;&lt;/a&gt;1. The Beatles（披头士乐队/甲壳虫乐队）&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://myblog-1258623898.cos.ap-chengdu.myqcloud.com/myblog/p106505_1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;这支才华横溢的英国乐队就不用多说了，几乎是英国摇滚的代名词，屹立半个世纪不倒，他们的作品现在还传颂世界。The Beatles（披头士乐队）虽然早已不复存在，但是他们却奠定了英式摇滚的基本基调，在国际音乐界享有盛誉。他们的贵族式的优雅反击直击摇滚的核心精神：为普通人发出声音和呐喊。爱和自由、反战是披头士永恒的创作主题。披头士有两位灵魂人物，一位是John Lennon（约翰·列侬），一位是James Paul McCartney（保罗·麦卡特尼）。喜欢这支乐队的朋友可以看看乐评《最爱那一世的疯狂——“披头士热”下的英伦风情》&lt;br&gt;经典专辑：《Sergeant Pepper’s Lonely Hearts Club Band》、《Abbey Road》、《Let It Be》、《Rubber Soul》、《Help!》&lt;/p&gt;
    
    </summary>
    
      <category term="音乐" scheme="https://chorer.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
      <category term="英伦摇滚" scheme="https://chorer.github.io/categories/%E9%9F%B3%E4%B9%90/%E8%8B%B1%E4%BC%A6%E6%91%87%E6%BB%9A/"/>
    
    
  </entry>
  
</feed>
